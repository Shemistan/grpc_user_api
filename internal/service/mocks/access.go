// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Shemistan/grpc_user_api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Access is an autogenerated mock type for the Access type
type Access struct {
	mock.Mock
}

// AddActualValuesInCache provides a mock function with given fields: ctx
func (_m *Access) AddActualValuesInCache(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AddActualValuesInCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOrUpdateAccess provides a mock function with given fields: ctx, req
func (_m *Access) AddOrUpdateAccess(ctx context.Context, req model.AccessRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddOrUpdateAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.AccessRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Check provides a mock function with given fields: ctx, req
func (_m *Access) Check(ctx context.Context, req string) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccess creates a new instance of Access. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccess(t interface {
	mock.TestingT
	Cleanup(func())
}) *Access {
	mock := &Access{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
