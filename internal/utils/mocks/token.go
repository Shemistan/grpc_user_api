// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	time "time"

	model "github.com/Shemistan/grpc_user_api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Token is an autogenerated mock type for the Token type
type Token struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: info, secretKey, duration
func (_m *Token) GenerateToken(info model.UserInfo, secretKey []byte, duration time.Duration) (string, error) {
	ret := _m.Called(info, secretKey, duration)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.UserInfo, []byte, time.Duration) (string, error)); ok {
		return rf(info, secretKey, duration)
	}
	if rf, ok := ret.Get(0).(func(model.UserInfo, []byte, time.Duration) string); ok {
		r0 = rf(info, secretKey, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(model.UserInfo, []byte, time.Duration) error); ok {
		r1 = rf(info, secretKey, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: tokenStr, secretKey
func (_m *Token) VerifyToken(tokenStr string, secretKey []byte) (*model.UserClaims, error) {
	ret := _m.Called(tokenStr, secretKey)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *model.UserClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (*model.UserClaims, error)); ok {
		return rf(tokenStr, secretKey)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) *model.UserClaims); ok {
		r0 = rf(tokenStr, secretKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(tokenStr, secretKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewToken creates a new instance of Token. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *Token {
	mock := &Token{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
